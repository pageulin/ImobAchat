<project 
    xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- 
    La version du format du fichier pom. 
    Actuellement la dernière version est la 4.0.0.
  --> 
  <modelVersion>4.0.0</modelVersion>

  <!--
    Le group ID de l'application. Le group ID
    s'apparente à un package Java mais pour un projet. Il évite
    une colision de nom dans le cas de deux projets ayant le même nom
    puiqu'ils peuvent avoir des group ID différents.
    Ainsi si deux projets s'appelle hello et qu'ils ont des group ID
    différents, ils sont considérés comme étant des projets différents.
  --> 
  <groupId>fr.universite.bordeaux</groupId>
  
  <!--
    Le nom du projet 
  --> 
  <artifactId>ImobAchat</artifactId>

  <!--
    La version de notre projet. Maven gère le versionnage
    afin de permettre le suivi des évolutions d'un projet.
    Ici, le suffixe "-SNAPSHOT" indique à Maven que le projet
    est en cours de développement pour cette version. 
  --> 
  <version>1.0-SNAPSHOT</version>
  
  <!--
    Le type de packaging, c'est-à-dire le type de projet.
    Ici, on indique à Maven que le projet doit être packagé
    sous la forme d'un WAR. Donc pour Maven, il s'agit d'une
    application Web.
  --> 
  <packaging>war</packaging>

  <!--
    Les propriétés de notre projet. On peut définir des propriétés
    spécifiques au projet ou des propriétés standard à Maven pour
    paramétrer la construction du projet.
  --> 
  <properties>
  
  	<org.springframework.version>4.0.2.RELEASE</org.springframework.version>
	<spring.security.version>3.2.3.RELEASE</spring.security.version>
  	<apache.tiles>3.0.3</apache.tiles>
  	
    <!--
      Propriété standard définissant la version minimale de Java supportée
      par les fichiers sources (ici 1.7 pour Java 7).
    --> 
    <maven.compiler.source>1.7</maven.compiler.source>

    <!--
      Propriété standard définissant la version Java des fichiers compilés
      du projet (ici 1.7 pour Java 7).
    --> 
    <maven.compiler.target>1.7</maven.compiler.target>

    <!--
      Le format d'encodage des fichiers source du projet. Attention, l'encodage
      par défaut n'est pas le même sous Windows et sous les systèmes *NIX.
      Il est donc plus sage de toujours positionner cette propriété dans le fichier pom.xml.
    --> 
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <dependencies>
  
	<dependency>
		<groupId>javax</groupId>
		<artifactId>javaee-api</artifactId>
		<version>7.0</version>
		<scope>provided</scope>
	</dependency>
	
	<!-- JAVAX Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.2.1</version>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
  		</dependency>
		
	
	<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.36</version>
		</dependency>
	
	<!-- Apache tiles -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>${apache.tiles}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>${apache.tiles}</version>
		</dependency>
	
	
 	<!-- HIBERNATE  --> 
 
 	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>5.0.1.Final</version>
	</dependency>
	
	
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-entitymanager</artifactId>
		<version>4.3.4.Final</version>
	</dependency>
	
	<!-- SPRING -->
	
	<dependency>
		<groupId>org.springframework.hateoas</groupId>
		<artifactId>spring-hateoas</artifactId>
		<version>0.19.0.RELEASE</version>
	</dependency>
	
	<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>1.5.1.RELEASE</version>
		</dependency>

		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Expression Language (depends on spring-core) Define this if you use 
			Spring Expression APIs (org.springframework.expression.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
			spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, 
			Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
			spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, 
			JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans, 
			spring-context) Define this if you need OXM (org.springframework.oxm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Web application development utilities applicable to both Servlet and 
			Portlet Environments (depends on spring-core, spring-beans, spring-context) 
			Define this if you use Spring MVC, or wish to use Struts, JSF, or another 
			web framework with Spring (org.springframework.web.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Servlet 
			Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Portlet 
			Container (org.springframework.web.portlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc-portlet</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
	
		
  </dependencies>
  
  <build>	
	<plugins>
	    <plugin>
	      <groupId>org.apache.openejb.maven</groupId>
	      <artifactId>tomee-maven-plugin</artifactId>
	      <version>1.7.1</version>
	      <configuration>
	        <tomeeVersion>1.7.1</tomeeVersion>
	        <tomeeClassifier>plus</tomeeClassifier>
	      </configuration>
	    </plugin>
	    
	    <plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.3.4.RC0</version>
				<configuration>
					<httpConnector>
						<port>8085</port>
					</httpConnector>
				</configuration>
			</plugin>
	    
	</plugins> 
  </build>
  
</project>